Subject: [PATCH] Add IntoPix decoder and other fixes
---
Index: libraw/libraw_datastream.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/libraw/libraw_datastream.h b/libraw/libraw_datastream.h
--- a/libraw/libraw_datastream.h	(revision a5d1ef3bb36995d3db2703619aa1ac2f4d7fdb98)
+++ b/libraw/libraw_datastream.h	(date 1718261299845)
@@ -60,7 +60,9 @@
 #define qMacOS 0
 #elif defined(__APPLE__)
 #define qWinOS 0
+#ifndef qMacOS
 #define qMacOS 1
+#endif
 #else
 /* define OS types for DNG here */
 #endif
Index: src/integration/dngsdk_glue.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/integration/dngsdk_glue.cpp b/src/integration/dngsdk_glue.cpp
--- a/src/integration/dngsdk_glue.cpp	(revision a5d1ef3bb36995d3db2703619aa1ac2f4d7fdb98)
+++ b/src/integration/dngsdk_glue.cpp	(date 1718261299845)
@@ -111,11 +111,9 @@
 
   if (libraw_internal_data.unpacker_data.tiff_compress == 52546) // regardless of flags or use_dngsdk value!
   {
-#ifdef qDNGSupportJXL
 	  if (dngVersion_Current >= dngVersion_1_7_0_0)
 		  return 1;
 	  else
-#endif
 		  return 0; // Old DNG SDK
   }
 
@@ -508,3 +506,7 @@
   dnghost = p;
 #endif
 }
+void *LibRaw::get_dng_host() {
+	return dnghost;
+}
+
Index: RawSpeed3/rawspeed3_c_api/rawspeed3_capi.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RawSpeed3/rawspeed3_c_api/rawspeed3_capi.cpp b/RawSpeed3/rawspeed3_c_api/rawspeed3_capi.cpp
--- a/RawSpeed3/rawspeed3_c_api/rawspeed3_capi.cpp	(revision a5d1ef3bb36995d3db2703619aa1ac2f4d7fdb98)
+++ b/RawSpeed3/rawspeed3_c_api/rawspeed3_capi.cpp	(date 1718261299845)
@@ -1,7 +1,7 @@
 #include "rawspeed3_capi.h"
 #include "RawSpeed-API.h"
 #define HAVE_PUGIXML
-#include <../pugixml/pugixml.hpp> // for xml_document, xml_pars...
+#include <pugixml.hpp> // for xml_document, xml_pars...
 
 extern const char* _rawspeed3_data_xml;
 
Index: src/decoders/decoders_libraw_dcrdefs.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/decoders/decoders_libraw_dcrdefs.cpp b/src/decoders/decoders_libraw_dcrdefs.cpp
--- a/src/decoders/decoders_libraw_dcrdefs.cpp	(revision a5d1ef3bb36995d3db2703619aa1ac2f4d7fdb98)
+++ b/src/decoders/decoders_libraw_dcrdefs.cpp	(date 1718261299845)
@@ -112,10 +112,142 @@
     ljpeg_end(&jh);
   }
 }
+#if defined(USE_INTOPIX_CPU_CODEC)
+#pragma push_macro("height")
+#pragma push_macro("width")
+#pragma push_macro("data_size")
+#pragma push_macro("data_offset")
+#pragma push_macro("getc")
+#undef height
+#undef width
+#undef data_size
+#undef data_offset
+#undef getc
+
+#include <IpxCpuCodec/ctx_options.h>
+#include <IpxCpuCodec/image_geometry.h>
+#include <IpxCpuCodec/image_format_cfg.h>
+#include <IpxCpuCodec/decode.h>
+#endif
 
 void LibRaw::nikon_he_load_raw_placeholder()
 {
+#if defined(USE_INTOPIX_CPU_CODEC)
+	char msg[4096];
+	const auto license_key = "AgAAAAIAgHkBAAB5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE5pa29uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF4hAABeIQAA/v////3///+DTsv+/////46SgbpMfRBF0xZ0H4twF0+RhbybmP3NcTY53f323J3Cm3OQQEttLd1hN/BmnXaaZWb1o1Ax9sqmmr7xxrk2m+V76hutqgnaYKTIGXkrQf5u3s/n4kz8CHbWMhoGx26gNS3qnkkL7EJjxalQielTJiYPfTFnO3sxDrtOCgoClMUc\n";
+
+	// Init the context options
+	ipxcpucodec_ctx_options_t *ctx_options = ipxcpucodec_init_ctx_options();
+	if (!ctx_options) {
+		fprintf(stderr, "[!] Could not initialize the context options.\n");
+		throw;
+	}
+	int rv = ipxcpucodec_set_license(ctx_options, (uint8_t *) license_key);
+	rv |= ipxcpucodec_set_thread_count(ctx_options, 8);
+	if (rv) {
+		fprintf(stderr, "[!] Error while setting context options.\n");
+		throw;
+	}
+
+	// Init the decoder
+	ipxcpucodec_decoder_t *decoder = ipxcpucodec_init_decoder(ctx_options);
+	if (!decoder) {
+		fprintf(stderr, "[!] Could not initialize the decoder.\n");
+		throw;
+	}
+
+	// Init image geometry structure
+	ipxcpucodec_image_geometry_t *image_geometry = ipxcpucodec_init_image_geometry();
+	if (image_geometry == nullptr) {
+		fprintf(stderr, "[!] Could not initialize the image geometry.\n");
+		throw;
+	}
+
+	// Init image format configuration
+	ipxcpucodec_image_format_cfg_t *image_format_cfg = ipxcpucodec_init_image_format_cfg();
+	if (!image_format_cfg) {
+		fprintf(stderr, "[!] Could not initialize the image format configuration.\n");
+		throw;
+	}
+	rv = ipxcpucodec_set_format(image_format_cfg, IPXCPUCODEC_FORMAT_MONO16b);
+	if (rv) {
+		fprintf(stderr, "[!] Error while setting format options.\n");
+		throw;
+	}
+
+	// Init decoding options
+	ipxcpucodec_decode_options_t *decode_options = ipxcpucodec_init_decode_options();
+	if (!decode_options) {
+		fprintf(stderr, "[!] Could not initialize the decoding options.\n");
+		throw;
+	}
+	rv |= ipxcpucodec_dec_set_proxy(decode_options, 0, 0);
+	if (rv) {
+		fprintf(stderr, "[!] Error while setting decoding options.\n");
+		throw;
+	}
+
+	// Find size of the input buffer
+	const int raw_data_size = libraw_internal_data.unpacker_data.data_size;
+
+	// Allocate memory for input bitstream buffer
+	const auto input_buffer = new unsigned char[raw_data_size];
+
+	// Read raw input data into input buffer
+	ifp->seek(libraw_internal_data.unpacker_data.data_offset, SEEK_SET);
+	ifp->read(input_buffer, 1, raw_data_size);
+
+	char err_msg[2048];
+    // Probe input image: obtain image size (input)
+    rv = ipxcpucodec_dec_probe2(decoder, raw_data_size, input_buffer, image_geometry);
+    if (rv != 0) {
+        ipxcpucodec_ret_code_to_str(static_cast<ipxcpucodec_ret_code_t>(rv), err_msg);
+        fprintf(stderr, "%s\n", err_msg);
+    	throw;
+    }
+    // Validate output configuration and obtain image size (output)
+    rv = ipxcpucodec_dec_validate_output_config(decoder, image_format_cfg, decode_options, image_geometry, image_geometry);
+    if (rv != 0) {
+        ipxcpucodec_ret_code_to_str(static_cast<ipxcpucodec_ret_code_t>(rv), err_msg);
+        fprintf(stderr, "%s\n", err_msg);
+    	throw;
+    }
+
+	const unsigned int output_buffer_size = ipxcpucodec_get_uncompressed_buffer_size(image_geometry, image_format_cfg);
+	const auto output_buffer = operator new[](output_buffer_size, std::align_val_t(64)); // align on 64 bytes to get extra performance
+
+    // needed to set padding bytes to 0x00 (padding bytes are not set by the IpxCpuCodec library)
+    memset(output_buffer, 0x00, output_buffer_size);
+
+    // decode the frame
+    rv = ipxcpucodec_decode(decoder, decode_options, image_format_cfg,
+                            raw_data_size, input_buffer, output_buffer_size, output_buffer, nullptr, nullptr);
+    if (rv) {
+        ipxcpucodec_ret_code_to_str(static_cast<ipxcpucodec_ret_code_t>(rv), err_msg);
+        fprintf(stderr, "%s\n", err_msg);
+        throw;
+    }
+
+    // Save output image to file
+	memcpy(raw_image, output_buffer, output_buffer_size);
+
+	// Release structures
+	ipxcpucodec_release_ctx_options(ctx_options);
+	ipxcpucodec_release_decoder(decoder);
+	ipxcpucodec_release_image_geometry(image_geometry);
+	ipxcpucodec_release_image_format_cfg(image_format_cfg);
+	ipxcpucodec_release_decode_options(decode_options);
+	delete[] input_buffer;
+	operator delete[](output_buffer, std::align_val_t(64));
+
+#pragma pop_macro("getc")
+#pragma pop_macro("data_offset")
+#pragma pop_macro("data_size")
+#pragma pop_macro("width")
+#pragma pop_macro("height")
+#else
     throw LIBRAW_EXCEPTION_UNSUPPORTED_FORMAT;
+#endif
 }
 
 void LibRaw::nikon_coolscan_load_raw()
Index: libraw/libraw.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/libraw/libraw.h b/libraw/libraw.h
--- a/libraw/libraw.h	(revision a5d1ef3bb36995d3db2703619aa1ac2f4d7fdb98)
+++ b/libraw/libraw.h	(date 1718261299845)
@@ -348,6 +348,7 @@
   virtual int adobe_coeff(unsigned, const char *, int internal_only = 0);
 
   void set_dng_host(void *);
+  void *get_dng_host();
 
 protected:
   static void *memmem(char *haystack, size_t haystacklen, char *needle,
Index: src/utils/decoder_info.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/utils/decoder_info.cpp b/src/utils/decoder_info.cpp
--- a/src/utils/decoder_info.cpp	(revision a5d1ef3bb36995d3db2703619aa1ac2f4d7fdb98)
+++ b/src/utils/decoder_info.cpp	(date 1718261299845)
@@ -120,7 +120,9 @@
   else if (load_raw == &LibRaw::nikon_he_load_raw_placeholder)
   {
     d_info->decoder_name = "nikon_he_load_raw_placeholder()";
+#if !defined(USE_INTOPIX_CPU_CODEC)
     d_info->decoder_flags = LIBRAW_DECODER_UNSUPPORTED_FORMAT;
+#endif
   }
   else if (load_raw == &LibRaw::nikon_load_sraw)
   {
Index: src/libraw_c_api.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/libraw_c_api.cpp b/src/libraw_c_api.cpp
--- a/src/libraw_c_api.cpp	(revision a5d1ef3bb36995d3db2703619aa1ac2f4d7fdb98)
+++ b/src/libraw_c_api.cpp	(date 1718261299845)
@@ -17,6 +17,9 @@
 
  */
 
+#ifdef USE_DNGSDK
+#include <dng_host.h>
+#endif
 #include <math.h>
 #include <errno.h>
 #include "libraw/libraw.h"
@@ -33,6 +36,9 @@
     try
     {
       ret = new LibRaw(flags);
+#ifdef USE_DNGSDK
+      ret->set_dng_host(new dng_host);
+#endif
     }
     catch (const std::bad_alloc& )
     {
@@ -186,6 +192,10 @@
     if (!lr)
       return;
     LibRaw *ip = (LibRaw *)lr->parent_class;
+#ifdef USE_DNGSDK
+    delete static_cast<dng_host *>(ip->get_dng_host());
+    ip->set_dng_host(NULL);
+#endif
     delete ip;
   }
 
